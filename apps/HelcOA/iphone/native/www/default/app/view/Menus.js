
/* JavaScript content from app/view/Menus.js in folder common */
/*
 * File: app/view/Home.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HelcOA.view.Menus', {
  extend: 'Ext.Panel',
  id:'Menus_id',
    requires: [
        'Ext.Toolbar',
        'Ext.Spacer',
        'Ext.Button',
        'Ext.Label',
        'Ext.dataview.List',
        'Ext.XTemplate'
    ],

    config: {
        style: 'background-color:#edebf1',
        layout: 'vbox',
        items: [
            {
                xtype: 'toolbar',
                docked: 'top',
                title: '日立电梯移动办公系统',
                items: [
                    {
                        xtype: 'spacer'
                    },
                    {
                        xtype: 'button',
                        handler: function(button, e) {
                            var menu = Ext.create('Ext.Menu', {
                                items: [
                                        {
                                            text: '我的流程',
                                            id: 'WDLZ_ID',
                                            handler:function(button,e){
                                              	 Ext.Viewport.hideMenu('right');
                                              }
                                        },
                                        {
                                        	text: '查询流程',
                                        	id: 'SearchProcess_ID',
                                        	handler:function(button,e){
                                        		Ext.Viewport.hideMenu('right');
                                        	}
                                        },
//                                        {
//                                            text: '修改密码',
//                                            listeners:{
//                                            	tap:function(){
//                                            		var obj=Ext.getCmp('ReportPassword_ID');
//                                            		if(!obj){
//                                            			obj=Ext.create('HelcOA.view.ReportPassword');
//                                            		}
//                                            		Ext.Viewport.setActiveItem(obj);
//                                            	}
//                                            },
//                                            handler:function(button,e){
//                                              	 Ext.Viewport.hideMenu('right');
//                                              	 
//                                              }
//                                        },
                                {
                                    text: '退出',
                                    listeners:{
                                    	tap:function(){
                                    		var obj=Ext.getCmp('login_id');
                                    		if(!obj){
                                    			obj=Ext.create('HelcOA.view.login');
                                    		}
                                    		Ext.Viewport.setActiveItem(obj);
                                    	}
                                    },
                                    handler:function(button,e){
                                     	 Ext.Viewport.hideMenu('right');
                                     	 
                                     }
                                }
                                ]
                            });

                            Ext.Viewport.setMenu(menu, {
                                side: 'right',
                                reveal: false
                            });

                            Ext.Viewport.showMenu('right');
                        },
                        itemId: 'mybutton',
                        iconCls: 'more'
                    }
                ]
            },
            {
                xtype: 'container',
                height: 86,
                //html: '<div class="i_Button_IconBorder" id="gg">   <div class="i_Button_Icon i_Button_Icon_bg05"></div>   <div class="i_Button_IconFont">公告</div> </div>         <div class="i_Button_IconBorder" id="yzhd">   <div class="i_Button_Icon i_Button_Icon_bg06"></div>   <div class="i_Button_IconFont">一周活动</div> </div>          <div class="i_Button_IconBorder" id="xdlz" >   <div class="i_Button_Icon i_Button_Icon_bg01"></div>   <div class="i_Button_IconFont" >启动流程</div> </div>        <div class="i_Button_IconBorder" id="ycp">   <div class="i_Button_Icon i_Button_Icon_bg02"></div>   <div class="i_Button_IconFont">已审批</div> </div>        <div class="i_Button_IconBorder" id="yjs">   <div class="i_Button_Icon i_Button_Icon_bg03"></div>   <div class="i_Button_IconFont">已结束</div> </div>',
                html: 	'<div class="i_Button_IconBorder" id="gg"  ><div class="i_Button_Icon i_Button_Icon_bg05"></div><div class="i_Button_IconFont">公告</div></div>'+
                		'<div class="i_Button_IconBorder" id="yzhd"><div class="i_Button_Icon i_Button_Icon_bg06"></div><div class="i_Button_IconFont">一周活动</div></div>'+
                		'<div class="i_Button_IconBorder" id="xdlz"><div class="i_Button_Icon i_Button_Icon_bg01"></div><div class="i_Button_IconFont">启动流程</div></div>'+
                		'<div class="i_Button_IconBorder" id="ycp" ><div class="i_Button_Icon i_Button_Icon_bg02"></div><div class="i_Button_IconFont">已审批</div></div>'+
                		'<div class="i_Button_IconBorder" id="yjs"> <div class="i_Button_Icon i_Button_Icon_bg03"></div><div class="i_Button_IconFont">已结束</div></div>',
                margin: '0 auto 12 auto',
                style: 'background-color:#fff',
            },
            {
                xtype: 'label',
                html: '待审批流程：',
                margin: '5 10'
            },
            {
                xtype: 'list',
                flex: 1,
                id: 'ForApprovalProcess_ID',
                itemTpl: [
                          '<table border=0 class="i_Button_List">',
                          '  <tr>',
                          '      <td rowspan="3" class="i_Button_List_Icon_1 {class}" style="color:{color}">{icon}</td>',
                          '      <td colspan="2" class="i_Button_List_Title">{major}{subject}</td>',
                          '  </tr>',
                          '  <tr>',
                          '      <td class="i_Button_List_left">{proc_name}</td>',
                          '      <td class="i_Button_List_right">{arr_time}</td>',
                          '  </tr>',
//                          '  <tr>',
//                          '      <td>当前状态:{activity_name}</td>',
//                          '  </tr>',
                          '</table>'
                      ],
//                itemTpl: [
//                    '<table border=0 class="i_Button_List">',
//                    '  <tr>',
//                    '      <td rowspan="2" class="i_Button_List_Icon_1 {class}" style="color:{color}">{icon}</td>',
//                    '      <td colspan="2" class="i_Button_List_Title">{major}{subject}</td>',
//                    '  </tr>',
//                    '  <tr>',
//                    '      <td class="i_Button_List_left">{proc_name}</td>',
//                    '      <td class="i_Button_List_right">{arr_time}</td>',
//                    '  </tr>',
//                    '</table>'
//                ],
                //activity_name
                onItemDisclosure: true,
                store:'MenusS',
                plugins: [{
                               xclass: 'Ext.myplug.PullRefreshFn',
                               lastUpdatedDateFormat: 'Y/m/d h:iA',
                               lastUpdatedText: '最后刷新时间:&nbsp;',
                               loadedText: '已刷新.',
                               loadingText: '正在刷新...',
                               pullText: '下拉刷新待审批列表...',
                               releaseText: '放开开始刷新...',
                               refreshFn: function(obj) { 
                            		object.loadMenus(_vt,'WebServiceTest',1);
                               }
                               
                           }],
            },
            {
                xtype: 'fieldset',
                hidden: true,
                items: [
                    {
                        xtype: 'textfield',
                        id: 'menu_store_data',
                    },
                    ]
            }
        ]
    },
    

});

Ext.define('Ext.myplug.PullRefreshFn', {
    extend: 'Ext.plugin.PullRefresh',
    alias: 'plugin.pullrefreshfn',
    requires: ['Ext.DateExtras'],


    config: {
        /**
         * @cfg {Function} refreshFn The function that will be called to refresh the list.
         * If this is not defined, the store's load function will be called.
         * The refresh function gets called with a reference to this plugin instance.
         * @accessor
         */
        refreshFn: null
    },
    
    fetchLatest: function() {
        if (this.getRefreshFn()) {
            this.getRefreshFn().call(this, this);
            this.setState("loaded");
            this.fireEvent('latestfetched', this, 'refreshFn, you have to handle toInsert youself');
            if (this.getAutoSnapBack()) {
                this.snapBack();
            }
        } else {    
            console.log('fetchLatest');
            var store = this.getList().getStore(),
                proxy = store.getProxy(),
                operation;
    
            operation = Ext.create('Ext.data.Operation', {
                page: 1,
                start: 0,
                model: store.getModel(),
                limit: store.getPageSize(),
                action: 'read',
                sorters: store.getSorters(),
                filters: store.getRemoteFilter() ? store.getFilters() : []
            });
    
            proxy.read(operation, this.onLatestFetched, this);
        }
    }
});